set previewer ~/code/scripts/lf/preview

# Basic Settings
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true

#Dynamically set number of columns
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        application/pdf) /usr/local/bin/devour zathura "$f";;
        video/*) /usr/local/bin/devour mpv --force-window=yes "$f";;
        audio/*) /usr/local/bin/devour mpv --force-window=yes "$f";;
        image/*) /usr/local/bin/devour feh --scale-down "$f";;
        *) /usr/local/bin/devour xdg-open "$f" ;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudovim ${{
  sudo nvim "$f"
}}
cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd dragon-target %dragon-drag-and-drop -t $fx
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.xz) tar -xf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd empty_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}


# Bindings
# Remove some defaults
map m
map o
#map n
map e
map "'"
map '"'
map d
map c
map f
map r

# Not really image preview
# map P $~/.local/scripts/lf/draw_img "$f"

cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    ~/.config/lf/draw_img $CACHE && rm $CACHE
}}
map + :video_preview

# File Openers
map EE $$EDITOR "$f"
map ES sudovim

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map te empty_trash
map tr restore_trash

# FZF
map <c-p> fzf_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dt dragon-target
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map C clear
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map o open_config
map H top
map L bottom
map R reload
map C clear
map U unselect

# Rename Commands --------------------
map r rename 
map i :rename; cmd-home
map e :rename; cmd-word-back; cmd-left
map b $printf "%s\n" $fx | vidir - #Bulk rename

# Movement --------------------
map ga cd ~/audio
map gC cd ~/.config

map gc<space> cd ~/code
map gcs cd ~/code/scripts

map gd<space> cd ~/documents
map gdp cd ~/documents/papers
map gdb cd ~/documents/books
map gds cd ~/documents/shorts
map gb cd ~/documents/books

map g. cd ~/.dotfiles
map gi cd ~/io
map gp cd ~/pictures
map gm cd ~/audio/music

map gv<space> cd ~/videos
map gvl cd ~/videos/lbry
map gvm cd ~/videos/repertoire-and-technique

map gl<space> cd ~/.local
map glx cd ~/.local/xdg-garbage
map gls cd ~/.local/share
map glu cd ~/.local/usb

map gu<space> cd /usr
map gul cd /usr/local
map gus<space> cd /usr/share
map gusa cd /usr/share/applications

map gt cd ~/.local/share/Trash/files

map g/ cd /
map ge cd /etc

# Swat Jumps --------------------
map gs<space> cd ~/documents/swat
# map gsl cd ~/documents/swat/spring/adv-logic
# map gsC cd ~/documents/swat/spring/cs-31
# map gss cd ~/documents/swat/spring/stats
# map gsc cd ~/code/swat-computers/cslab/cs31
# map gsp cd ~/documents/swat/spring/psych-33
