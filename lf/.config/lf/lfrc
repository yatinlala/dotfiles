# interpreter for shell commands
set shell sh

set shellopts '-eu'

%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# Basic Settings
set preview
set hidden
set drawbox
set icons
set ignorecase

# #Dynamically set number of columns
# %{{
#     w=$(tput cols)
#     if [ $w -le 80 ]; then
#         lf -remote "send $id set ratios 1:2"
#     elif [ $w -le 160 ]; then
#         lf -remote "send $id set ratios 1:2:3"
#     else
#         lf -remote "send $id set ratios 1:2:3:5"
#     fi
# }}

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) exec $EDITOR "$f";;
        application/msword|application/*officedocument.*) setsid onlyoffice-desktopeditors "$f" &;;
        application/pdf) swallow zathura "$f";;
        # application/pdf) zathura "$f";;
        video/*|audio/*) swallow mpv --force-window=yes "$f";;
        # video/*|audio/*) mpv --force-window=yes "$f";;
        image/*) swallow feh --scale-down "$f";;
        # image/*) feh --scale-down "$f";;
        *) xdg-open "$f";;
    esac
}}

cmd bulk-rename ${{
    vimv --git -- $(basename -a -- $fx)

    lf -remote "send $id load"
    lf -remote "send $id unselect"

}}


cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir "$ans"
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudoedit ${{
  sudoedit "$f"
}}
cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd smart_w ${{
  if [ $LF_LEVEL -eq 1 ]; then
      zsh
  else
      lf -remote "send $id quit"
  fi
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

cmd dragon %dragon-drop -a -x "$fx"
cmd dragon-stay %dragon-drop -a "$fx"
cmd dragon-individual %dragon-drop "$fx"
cmd dragon-target %dragon-drop -t "$fx"
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.rar) unrar e "$f" ;;
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.xz) tar -xf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd empty_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd fasd_dir ${{
    res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}


# Bindings
# Remove some defaults
map m
map o
map w
map e
map "'"
map '"'
map d
map c
map f
map r
map t

map w smart_w

# File Openers
map EE $$EDITOR "$f"
map ES sudoedit

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map te empty_trash
map tr restore_trash

# Fasd
map go :fasd_dir

# FZF
map <c-p> fzf_jump

map <c-s> share

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dt dragon-target
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map C clear
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ch chmod
map H top
map L bottom
map R reload
map C clear
map U unselect
map T tag-toggle

# Rename Commands --------------------
map r rename 
map i :rename; cmd-home
map e :rename; cmd-word-back; cmd-left
map b bulk-rename

# Movement --------------------
map ga cd ~/audio
map gC cd ~/.config

map gc cd ~/projects
map gS cd ~/projects/scripts

map gd cd ~/documents
map gb cd ~/documents/books

map g. cd ~/.dotfiles
map gi cd ~/io
map gp cd ~/pictures
map gw cd ~/pictures/wallpapers
map gm cd ~/audio/music

map gv cd ~/videos

map gl<space> cd ~/.local
map gls cd ~/.local/share
map glx cd ~/.local/xdg-garbage

map glm<space> cd ~/.local/mount
map glmc cd ~/.local/mount/cslab
map glmu cd ~/.local/mount/usb


map gu<space> cd /usr
map gul cd /usr/local
map gus<space> cd /usr/share
map gusa cd /usr/share/applications

map gt cd ~/.local/share/Trash/files

map g/ cd /
map ge cd /etc

# Swat Jumps --------------------
map gs<space> cd ~/documents/swat
map gsl cd ~/documents/swat/junior/linear-algebra
map gsa cd ~/documents/swat/junior/algo

map gr cd ~/projects/grodner-research
